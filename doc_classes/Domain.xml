<?xml version="1.0" encoding="UTF-8" ?>
<class name="Domain" inherits="Resource" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		The domain in which goals are to be achieved.
	</brief_description>
	<description>
		The Domain class is used to represent the environment or context in which multiple goals need to be achieved.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_actions">
			<return type="void" />
			<param index="0" name="actions" type="Callable[]" />
			<description>
			</description>
		</method>
		<method name="add_multigoal_methods">
			<return type="void" />
			<param index="0" name="methods" type="Callable[]" />
			<description>
			</description>
		</method>
		<method name="add_task_methods">
			<return type="void" />
			<param index="0" name="task_name" type="String" />
			<param index="1" name="methods" type="Callable[]" />
			<description>
			</description>
		</method>
		<method name="add_unigoal_methods">
			<return type="void" />
			<param index="0" name="task_name" type="String" />
			<param index="1" name="methods" type="Callable[]" />
			<description>
			</description>
		</method>
		<method name="method_verify_goal" qualifiers="static">
			<return type="Variant" />
			<param index="0" name="state" type="Dictionary" />
			<param index="1" name="method" type="String" />
			<param index="2" name="state_var" type="String" />
			<param index="3" name="arguments" type="String" />
			<param index="4" name="desired_values" type="Variant" />
			<param index="5" name="depth" type="int" />
			<param index="6" name="verbose" type="int" />
			<description>
				Verifies if a specific goal has been achieved given the current state, method, state variable, arguments, desired values, depth, and verbosity level.
			</description>
		</method>
		<method name="print_actions" qualifiers="const">
			<return type="void" />
			<description>
				Prints the actions currently available in the domain.
			</description>
		</method>
		<method name="print_domain" qualifiers="const">
			<return type="void" />
			<description>
				Prints the current state of the domain.
			</description>
		</method>
		<method name="print_methods" qualifiers="const">
			<return type="void" />
			<description>
				Prints the methods currently available in the domain.
			</description>
		</method>
		<method name="print_multigoal_methods" qualifiers="const">
			<return type="void" />
			<description>
				Prints the multi-goal methods currently available in the domain.
			</description>
		</method>
		<method name="print_task_methods" qualifiers="const">
			<return type="void" />
			<description>
				Prints the task methods currently available in the domain.
			</description>
		</method>
		<method name="print_unigoal_methods" qualifiers="const">
			<return type="void" />
			<description>
				Prints the uni-goal methods currently available in the domain.
			</description>
		</method>
	</methods>
	<members>
		<member name="actions" type="Dictionary" setter="set_actions" getter="get_actions" default="{}">
			The actions that can be performed in the domain, represented as a dictionary.
		</member>
		<member name="multigoal_methods" type="Callable[]" setter="set_multigoal_methods" getter="get_multigoal_methods" default="[Callable()]">
			The methods for achieving multi-goals, represented as an array.
		</member>
		<member name="tasks" type="Dictionary" setter="set_task_methods" getter="get_task_methods" default="{ &quot;_verify_g&quot;: [Callable()], &quot;_verify_mg&quot;: [Callable()] }">
			The tasks that can be performed in the domain, represented as a dictionary of callables.
		</member>
		<member name="unigoal_methods" type="Dictionary" setter="set_unigoal_methods" getter="get_unigoal_methods" default="{}">
			The methods for achieving uni-goals, represented as a dictionary.
		</member>
	</members>
</class>
