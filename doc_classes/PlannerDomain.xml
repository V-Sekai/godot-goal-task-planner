<?xml version="1.0" encoding="UTF-8" ?>
<class name="PlannerDomain" inherits="Resource" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		The [PlannerDomain] in which goals are to be achieved.
	</brief_description>
	<description>
		The [PlannerDomain] represents the environment or context of a [PlannerPlan] in which multiple actions, goals, [PlannerMultigoal]s, and tasks need to be achieved.
		Actions and methods are typically defined as functions (e.g., in GDScript, or C++ static/member functions exposed as [Callable]s) and then registered with the domain. Their preconditions are usually implemented as conditional logic within these functions.
		The functions wrapped by these [Callable]s should adhere to the following conventions:
		- [b]Action functions[/b]: Their arguments representing the current state and action parameters should be treated as read-only (e.g., by not modifying input Dictionaries directly but working on copies if changes are needed). They must return a new [Dictionary] representing the state after the action is applied.
		- [b]Method, goal, and task functions[/b]: Their arguments should also be treated as read-only. They must return a [Variant] which is either false (boolean) to indicate failure/non-applicability, or an [Array] of sub-tasks/sub-goals to indicate success. An empty [Array] can signify that the method/goal/task was achieved with no further steps.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_actions">
			<return type="void" />
			<param index="0" name="actions" type="Callable[]" />
			<description>
				Adds a list of [Callable]s representing actions to the domain. Each [Callable] should refer to a function whose arguments are treated as read-only (the first usually being the current state [Dictionary]) and which returns a new [Dictionary] representing the state after the action.
			</description>
		</method>
		<method name="add_multigoal_methods">
			<return type="void" />
			<param index="0" name="methods" type="Callable[]" />
			<description>
				Adds a list of [Callable]s representing methods for achieving multigoals. Each [Callable] should refer to a function whose arguments are treated as read-only (e.g., current state [Dictionary], the [PlannerMultigoal]) and which returns a [Variant]. The [Variant] should be false if the method is not applicable, or an [Array] of sub-tasks/goals if it is.
			</description>
		</method>
		<method name="add_task_methods">
			<return type="void" />
			<param index="0" name="task_name" type="String" />
			<param index="1" name="methods" type="Callable[]" />
			<description>
				Adds a list of [Callable]s representing methods for a specific task_name. Each [Callable] should refer to a function whose arguments are treated as read-only (the first usually being the current state [Dictionary], followed by task-specific arguments) and which returns a [Variant]. The [Variant] should be false if the method is not applicable, or an [Array] of sub-tasks/goals if it is.
			</description>
		</method>
		<method name="add_unigoal_methods">
			<return type="void" />
			<param index="0" name="task_name" type="String" />
			<param index="1" name="methods" type="Callable[]" />
			<description>
				Adds a list of [Callable]s representing methods for achieving a specific unigoal (identified by task_name, which is often the state variable the unigoal targets). Each [Callable] should refer to a function whose arguments are treated as read-only (e.g., current state [Dictionary], goal-specific arguments) and which returns a [Variant]. The [Variant] should be false if the method is not applicable, or an [Array] of sub-tasks/goals if it is.
			</description>
		</method>
		<method name="method_verify_goal" qualifiers="static">
			<return type="Variant" />
			<param index="0" name="state" type="Dictionary" />
			<param index="1" name="method" type="String" />
			<param index="2" name="state_var" type="String" />
			<param index="3" name="arguments" type="String" />
			<param index="4" name="desired_values" type="Variant" />
			<param index="5" name="depth" type="int" />
			<param index="6" name="verbose" type="int" />
			<description>
				A static helper method to verify if a specific unigoal condition (state_var, arguments, desired_values) is met in the given state after a method was applied. Returns an empty [Array] if the goal is achieved, or false otherwise. Used for debugging and plan verification, potentially logging information based on verbose level.
			</description>
		</method>
	</methods>
	<members>
		<member name="actions" type="Dictionary" setter="set_actions" getter="get_actions" default="{}">
			A [Dictionary] mapping action names (String) to [Callable]s. The functions referenced by these [Callable]s should take read-only arguments and return a new [Dictionary] state.
		</member>
		<member name="multigoal_methods" type="Callable[]" setter="set_multigoal_methods" getter="get_multigoal_methods" default="[Callable()]">
			An [Array] of [Callable]s. The functions referenced by these [Callable]s are used to decompose [PlannerMultigoal]s, should take read-only arguments, and return a [Variant] (false or [Array] of sub-steps).
		</member>
		<member name="tasks" type="Dictionary" setter="set_task_methods" getter="get_task_methods" default="{ &quot;_verify_g&quot;: [Callable()], &quot;_verify_mg&quot;: [Callable()] }">
			A [Dictionary] mapping task names (String) to [Array]s of [Callable]s. The functions referenced by these [Callable]s accomplish tasks, should take read-only arguments, and return a [Variant] (false or [Array] of sub-steps).
		</member>
		<member name="unigoal_methods" type="Dictionary" setter="set_unigoal_methods" getter="get_unigoal_methods" default="{}">
			A [Dictionary] mapping unigoal names (typically state variable names, String) to [Array]s of [Callable]s. The functions referenced by these [Callable]s achieve unigoals, should take read-only arguments, and return a [Variant] (false or [Array] of sub-steps).
		</member>
	</members>
</class>
